import os
import material_color_utilities_python as mcu

def write(file, scheme, scheme_8):
	file.write("\\NeedsTeXFormat{LaTeX2e}\n")
	file.write("\\ProvidesPackage{%s}\n" % ( os.path.splitext(os.path.basename(file.name))[0] ))
	file.write("\\RequirePackage{xcolor}\n\n")

	file.write("\\definecolor{primary}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_primary())[1:]))
	file.write("\\definecolor{primaryContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_primaryContainer())[1:]))
	file.write("\\definecolor{onPrimary}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onPrimary())[1:]))
	file.write("\\definecolor{onPrimaryContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onPrimaryContainer())[1:]))
	file.write("\\definecolor{inversePrimary}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_inversePrimary())[1:]))
	file.write("\\definecolor{secondary}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_secondary())[1:]))
	file.write("\\definecolor{secondaryContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_secondaryContainer())[1:]))
	file.write("\\definecolor{onSecondary}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onSecondary())[1:]))
	file.write("\\definecolor{onSecondaryContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onSecondaryContainer())[1:]))
	file.write("\\definecolor{tertiary}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_tertiary())[1:]))
	file.write("\\definecolor{tertiaryContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_tertiaryContainer())[1:]))
	file.write("\\definecolor{onTertiary}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onTertiary())[1:]))
	file.write("\\definecolor{onTertiaryContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onTertiaryContainer())[1:]))
	file.write("\\definecolor{surface}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surface())[1:]))
	file.write("\\definecolor{surfaceDim}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceDim())[1:]))
	file.write("\\definecolor{surfaceBright}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceBright())[1:]))
	file.write("\\definecolor{surfaceContainerLowest}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceContainerLowest())[1:]))
	file.write("\\definecolor{surfaceContainerLow}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceContainerLow())[1:]))
	file.write("\\definecolor{surfaceContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceContainer())[1:]))
	file.write("\\definecolor{surfaceContainerHigh}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceContainerHigh())[1:]))
	file.write("\\definecolor{surfaceContainerHighest}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceContainerHighest())[1:]))
	file.write("\\definecolor{surfaceVariant}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceVariant())[1:]))
	file.write("\\definecolor{onSurface}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onSurface())[1:]))
	file.write("\\definecolor{onSurfaceVariant}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onSurfaceVariant())[1:]))
	file.write("\\definecolor{inverseSurface}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_inverseSurface())[1:]))
	file.write("\\definecolor{inverseOnSurface}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_inverseOnSurface())[1:]))
	file.write("\\definecolor{background}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_background())[1:]))
	file.write("\\definecolor{onBackground}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onBackground())[1:]))
	file.write("\\definecolor{error}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_error())[1:]))
	file.write("\\definecolor{errorContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_errorContainer())[1:]))
	file.write("\\definecolor{onError}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onError())[1:]))
	file.write("\\definecolor{onErrorContainer}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_onErrorContainer())[1:]))
	file.write("\\definecolor{outline}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_outline())[1:]))
	file.write("\\definecolor{outlineVariant}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_outlineVariant())[1:]))
	file.write("\\definecolor{shadow}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_shadow())[1:]))
	file.write("\\definecolor{surfaceTint}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme.get_surfaceTint())[1:]))
	file.write("\\definecolor{scrim}{HTML}{%s}\n\n" % (mcu.hexFromArgb(scheme.get_scrim())[1:]))

	file.write("\\definecolor{black}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_black())[1:]))
	file.write("\\definecolor{red}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_red())[1:]))
	file.write("\\definecolor{green}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_green())[1:]))
	file.write("\\definecolor{yellow}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_yellow())[1:]))
	file.write("\\definecolor{blue}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_blue())[1:]))
	file.write("\\definecolor{magenta}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_magenta())[1:]))
	file.write("\\definecolor{cyan}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_cyan())[1:]))
	file.write("\\definecolor{white}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_white())[1:]))
	file.write("\\definecolor{bright_black}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_bright_black())[1:]))
	file.write("\\definecolor{bright_red}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_bright_red())[1:]))
	file.write("\\definecolor{bright_green}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_bright_green())[1:]))
	file.write("\\definecolor{bright_yellow}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_bright_yellow())[1:]))
	file.write("\\definecolor{bright_blue}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_bright_blue())[1:]))
	file.write("\\definecolor{bright_magenta}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_bright_magenta())[1:]))
	file.write("\\definecolor{bright_cyan}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_bright_cyan())[1:]))
	file.write("\\definecolor{bright_white}{HTML}{%s}\n" % (mcu.hexFromArgb(scheme_8.get_bright_white())[1:]))
